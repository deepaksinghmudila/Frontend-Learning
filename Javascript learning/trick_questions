1. Accidental global variable:

function foo() {
  let a = b = 0;
  a++;
  return a;
}

foo();
typeof a; // => ???
typeof b; // => ???

Solution:
Letâ€™s look at the line 2: let a = b = 0. This statement declares a local variable a. However, it does declare a global variable b.

No variable b is declared neither in the foo() scope or global scope. So JavaScript interprets b = 0 expression as window.b = 0.

In other words, b is a global variable created accidentally.
  
  function foo(count){
     for(i =0; i<count; i++)
     {
        //
     }
  }
  
  function foo() {
     i=0;
  }
  
  function foo() {
     let a= b=0 ; 
  }
In a browser, the above code snippet is equivalent to:

function foo() {
  let a;  window.b = 0;  a = window.b;  a++;
  return a;
}

foo();
typeof a;        // => 'undefined'
typeof window.b; // => 'number'

typeof a is 'undefined'. The variable a exists within foo() scope and not available in the outside scope.

Because b is a global variable with the value 0, the typeof b evaluates to 'number'. 

/***********************************************************************************************************/

2. Array length property

What is the value of clothes[0]:

const clothes = ['jacket', 't-shirt'];
clothes.length = 0;

clothes[0];     // => ???

Solution:

length property of the array object has a special behavior:

    Reducing the value of the length property has the side-effect of deleting own array elements whose array index is between the old and new length values.

As result when JavaScript executes clothes.length = 0, all clothes items are deleted.

clothes[0] is undefined, because clothes array has been emptied. 


/***********************************************************************************************************/
3.  
/***********************************************************************************************************/
